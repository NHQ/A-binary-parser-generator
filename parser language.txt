The parser knows a relatively small language:

  string   A string of ascii characters
  name     <string>

  value    An integer number

  type     BYTE               8 bit value
           | ASCII            8 bit ascii value (expressly not called a 'char')
           | SHORT            16 bit signed integer
           | USHORT           16 bit unsigned integer
           | UINT24           24 bit unsigned integer
           | LONG             32 bit signed integer
           | ULONG            32 bit unsigned integer
           | <type>[<value>]  array notation
           | <collection name>  custom type (think "struct")


  record   RESERVED <type>
           | <type> <name>
           | (GLOBAL|LOCAL|IMMEDIATE)? <type> OFFSET <name> (TO <collection name>)? (RELATIVE TO <name>)?

      Sometimes specs have "reserved" data, which is a byte, short, etc. that
      basically acts as a spacer. These will be read and then discarded

      For offsets, we need an indicator that tells us whether it's:

        GLOBAL      relative to the start of this file
        LOCAL       relative to the start of this collection
        IMMEDIATE   relative to the next byte's position

      Or, if the offset is relative to another record, RELATIVE TO <name of that
      record, within scope>.

  comparator    any language-supported numerical comparator
  conditional   (<name> <comparator> <value>)
  conditioned   <conditional> { <collection body> }

      conditioned collection blocks let us generate parsers that can deal with
      multiple versions of data blocks (since specs tend to change over the years).

  collection name: <name>
  collection identifier: Collection <collection name>

  collection: <collection identifier> { <collection body> }

  collection body: (record | collection | conditioned)*

      Collections can be empty, but if not they list records and possible "private"
      collections for use as "structs" in that collection. Any parent collection
      won't see it.

It has an even smaller set of functions and macros:

  HERE             The current absolute offset in the file
  START            The absolute offset (in bytes) for the start of this collection
  VALUE(<name>)    Returns the value of the passed record
  TERMINATE        Will cause the generated parser to print the termination message, and
                   cancel the parsing process.
  WARN             Will cause a message to be generated, without terminating the parsing process.


The language also supports /* block comments */ as well as // line comments.

It'll generate JavaScript, for now, because it's a stupidly simple language to generate
code for. I'm sure any number of other target languages can be added later, because
honestly, it's not rocket science =)

This library will simply map the binary data to unpacked (as far as it knows how to)
data in memory, but without any traversal logic; it's simply a data unpacker. This
allows for data->XML or data->JSON unpacking, and probably also the reverse, provided
the information from the .spec file is kept ... somewhere...

The generated code operates on a data object that looks like this:

  {
    pointer: <number>   // should default to 0, indicates the current offset in the data
    marks: []           // an array for pointer save/restores
    bytecode: arraybuffer   // the data array
  }

For an example of a .spec file, have a look at "OpenType.spec"
